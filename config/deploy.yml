# Name of your application. Used to uniquely configure containers.
service: music-marketplace

# Name of the container image.
image: music-marketplace

# Deploy to these servers.
servers:
  web:
    - localhost

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: music.rrbstudio.com

# Credentials for your image host.
registry:
  server: ghcr.io
  username: 
    - GITHUB_USERNAME
  password:
    - GITHUB_TOKEN

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    PORT: 3000
    RAILS_ENV: production
    RAILS_LOG_TO_STDOUT: 1
    SOLID_QUEUE_IN_PUMA: true
  secret:
    - RAILS_MASTER_KEY
    - DATABASE_URL
    - REDIS_URL
    - SECRET_KEY_BASE
    - STRIPE_PUBLIC_KEY
    - STRIPE_SECRET_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "music_marketplace_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: ruby-3.2.3
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:15
    host: localhost
    port: 5432
    env:
      clear:
        POSTGRES_USER: music_marketplace
        POSTGRES_DB: music_marketplace_production
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data
    options:
      publish:
        - "127.0.0.1:5432:5432"

  redis:
    image: redis:7.0
    host: localhost
    port: 6379
    directories:
      - data:/data
    options:
      publish:
        - "127.0.0.1:6379:6379"

# Health check configuration moved to proper location
